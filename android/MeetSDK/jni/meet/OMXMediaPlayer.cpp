/* DO NOT EDIT THIS FILE - it is machine generated */
#include "OMXMediaPlayer.h"
#include "FFMediaPlayer.h"
#include "libplayer.h"
#include "jniUtils.h"
#include "platform/platforminfo.h"
#include <dlfcn.h> // for dlopen ...
#define LOG_TAG "JNI-OMXMediaPlayer"
#include "pplog.h"

extern struct PlatformInfo* gPlatformInfo;

typedef IPlayer* (*GET_OMXPLAYER_FUN) (void*);
typedef void (*RELEASE_OMXPLAYER_FUN) (IPlayer *);

GET_OMXPLAYER_FUN getOMXPlayerFun = NULL; // function to NEW player instance
RELEASE_OMXPLAYER_FUN releaseOMXPlayerFun = NULL;

static IPlayer* setOMXMediaPlayer(JNIEnv* env, jobject thiz, IPlayer* player);

static IPlayer* getOMXMediaPlayer(JNIEnv* env, jobject thiz);

struct fields_t {
	jfieldID    context; // for save player handle
	jfieldID	listener; // for save listener handle
	jfieldID    surface; // for save surface object
	/* actually in android.view.Surface XXX */
	jfieldID    surface_native;

	jmethodID   post_event;
	jfieldID    iSubtitle;
};

static fields_t fields;
static bool sInited = false;

bool setup_omxplayer(void *so_handle)
{
	getOMXPlayerFun = (GET_OMXPLAYER_FUN)dlsym(so_handle, "getOMXPlayer");
	if (getOMXPlayerFun == NULL) {
		PPLOGE("Init getExtractorFun() failed: %s", dlerror());
		return false;
	}

	releaseOMXPlayerFun = (RELEASE_OMXPLAYER_FUN)dlsym(so_handle, "releaseOMXPlayer");
	if (releaseOMXPlayerFun == NULL) {
		PPLOGE("Init releasePlayer() failed: %s", dlerror());
		return false;
	}


	return true;
}

OMXMediaPlayerListener::OMXMediaPlayerListener(JNIEnv* env, jobject thiz, jobject weak_thiz)
{
	PPLOGD("OMXMediaPlayerListener constructor");

	// Hold onto the MediaPlayer class for use in calling the static method
	// that posts events to the application thread.
	jclass clazz = env->GetObjectClass(thiz);
	if (clazz == NULL) {
		PPLOGE("Can't find android/pplive/media/player/OMXMediaPlayer");
		jniThrowException(env, "java/lang/Exception", NULL);
		return;
	}
	mClass = (jclass)env->NewGlobalRef(clazz);

	// We use a weak reference so the MediaPlayer object can be garbage collected.
	// The reference is only used as a proxy for callbacks.
	mObject  = env->NewGlobalRef(weak_thiz);
}

OMXMediaPlayerListener::~OMXMediaPlayerListener()
{
	PPLOGD("OMXMediaPlayerListener destructor");
	// remove global references
	//JNIEnv *env = AndroidRuntime::getJNIEnv();
	JNIEnv *env = getJNIEnvPP();
	if (env) {
		env->DeleteGlobalRef(mObject);
		env->DeleteGlobalRef(mClass);
	}
	else {
		PPLOGE("~OMXMediaPlayerListener() env is null");
	}
}

void OMXMediaPlayerListener::notify(int msg, int ext1, int ext2)
{
	PPLOGI("notify() %d %d %d", msg, ext1, ext2);
	JNIEnv *env = getAttachedJNIEnv();
	if (env) {
		env->CallStaticVoidMethod(mClass, fields.post_event, mObject, msg, ext1, ext2, 0);
	}
	else {
		PPLOGE("notify() env is null");
	}
}

/* Header for class android_pplive_media_player_OMXPlayer */

#ifndef _Included_android_pplive_media_player_OMXPlayer
#define _Included_android_pplive_media_player_OMXPlayer
#ifdef __cplusplus
extern "C" {
#endif

// called when MeetSDK.initSDK() call initPlayer()
static
jboolean android_media_omxmediaplayer_init(JNIEnv *env, jobject thiz)
{
	if (sInited)
		return true;

	jclass clazz = env->FindClass("android/pplive/media/player/OMXMediaPlayer");
	if (clazz == NULL)
		jniThrowException(env, "java/lang/RuntimeException", "Can't find android/pplive/media/player/OMXMediaPlayer");

	fields.context = env->GetFieldID(clazz, "mNativeContext", "J");
	if (fields.context == NULL)
		jniThrowException(env, "java/lang/RuntimeException", "Can't find OMXMediaPlayer.mNativeContext");

	fields.listener = env->GetFieldID(clazz, "mListenerContext", "J");
	if (fields.listener == NULL)
		jniThrowException(env, "java/lang/RuntimeException", "Can't find OMXMediaPlayer.mListenerContext");

	fields.post_event = env->GetStaticMethodID(clazz, "postEventFromNative",
			"(Ljava/lang/Object;IIILjava/lang/Object;)V");
	if (fields.post_event == NULL)
		jniThrowException(env, "java/lang/RuntimeException", "Can't find OMXMediaPlayer.postEventFromNative");

#ifdef BUILD_ONE_LIB
	getOMXPlayerFun		= getOMXPlayerFun;
	releaseOMXPlayerFun	= releaseOMXPlayerFun;
#else
	if (!loadPlayerLib()) {
		PPLOGE("failed to load player lib");
		return false;
	}
#endif

	sInited = true;
	return true;
}

// callled when new OMXMediaPlayer
JNIEXPORT void JNICALL android_media_omxmediaplayer_setup
  (JNIEnv *env, jobject thiz, jobject weak_this)
{
	PPLOGI("native_setup");

	IPlayer* mp = getOMXPlayerFun((void*)gPlatformInfo);
	if (mp == NULL) {
		jniThrowException(env, "java/lang/RuntimeException", "Create IPlayer failed.");
		return;
	}

	// create new listener and give it to MediaPlayer
	OMXMediaPlayerListener * player_listener = new OMXMediaPlayerListener(env, thiz, weak_this);
	//IPlayer takes responsibility to release listener.
	mp->setListener(player_listener);

	env->SetLongField(thiz, fields.listener, (int64_t)player_listener);

	// Stow our new C++ MediaPlayer in an opaque field in the Java object.
	setOMXMediaPlayer(env, thiz, mp);
	//check if it needs to release old mediaplayer.
}

/*
 * Class:     android_pplive_media_player_OMXPlayer
 * Method:    getVideoWidth
 * Signature: ()I
 */
//JNIEXPORT jint JNICALL Java_android_pplive_media_player_OMXPlayer_getVideoWidth
JNIEXPORT jint JNICALL android_media_omxmediaplayer_getVideoWidth
  (JNIEnv *env, jobject thiz)
{
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		PPLOGE("player is null, getVideoWidth failed");
		return 0;
	}
	int w;
	if (0 != mp->getVideoWidth(&w)) {
		PPLOGE("getVideoWidth failed");
		w = 0;
	}
	PPLOGI("getVideoWidth: %d", w);
	return w;
}

/*
 * Class:     android_pplive_media_player_OMXPlayer
 * Method:    getVideoHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL android_media_omxmediaplayer_getVideoHeight
  (JNIEnv *env, jobject thiz)
{
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		PPLOGE("player is null, getVideoHeight failed");
		return 0;
	}
	int h;
	if (0 != mp->getVideoHeight(&h)) {
		PPLOGE("getVideoHeight failed");
		h = 0;
	}
	PPLOGI("getVideoHeight: %d", h);
	return h;
}

JNIEXPORT jint JNICALL android_media_omxmediaplayer_getCurrentPosition
	(JNIEnv *env, jobject thiz)
{
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		PPLOGE("player is null, getVideoHeight failed");
		return 0;
	}
	int msec;
	if (0 != mp->getCurrentPosition(&msec)) {
		PPLOGE("getCurrentPosition failed");
		msec = 0;
	}
	PPLOGI("getCurrentPosition: %d", msec);
	return msec;
}

JNIEXPORT jint JNICALL android_media_omxmediaplayer_getDuration
	(JNIEnv *env, jobject thiz)
{
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		PPLOGE("player is null, getDuration failed");
		return 0;
	}
	int msec;
	if (0 != mp->getDuration(&msec)) {
		PPLOGE("getDuration failed");
		msec = 0;
	}
	PPLOGI("getDuration: %d", msec);
	return msec;
}

JNIEXPORT jint JNICALL android_media_omxmediaplayer_getBufferingTime
	(JNIEnv *env, jobject thiz)
{
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		PPLOGE("player is null, getBufferingTime failed");
		return 0;
	}
	int msec;
	if (0 != mp->getBufferingTime(&msec)) {
		PPLOGE("getBufferingTime failed");
		msec = 0;
	}
	PPLOGI("getBufferingTime: %d", msec);
	return msec;

}

/*
 * Class:     android_pplive_media_player_OMXPlayer
 * Method:    setOption
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL android_media_omxmediaplayer_setOption
  (JNIEnv *env, jobject thiz, jstring option)
{
	
}

JNIEXPORT void android_media_omxmediaplayer_start(JNIEnv *env, jobject thiz)
{
	PPLOGI("android_media_omxmediaplayer_start()");
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return;
	}

	mp->start();
}

JNIEXPORT void android_media_omxmediaplayer_stop(JNIEnv *env, jobject thiz)
{
	PPLOGI("android_media_omxmediaplayer_stop");
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return;
	}

	mp->stop();
	PPLOGI("stoped");
}

JNIEXPORT void android_media_omxmediaplayer_pause(JNIEnv *env, jobject thiz)
{
	PPLOGI("android_media_omxmediaplayer_pause");
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return;
	}

	mp->pause();
	PPLOGI("paused");
}

JNIEXPORT void android_media_omxmediaplayer_seekTo(JNIEnv *env, jobject thiz, int msec)
{
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return;
	}

	int playTime = 0;
	mp->getCurrentPosition(&playTime);
	int mediaDiff = msec - playTime; // msec
	mediaDiff = mediaDiff>0 ? mediaDiff : -mediaDiff;

	if(mediaDiff > 2000) // 2sec
	{
		PPLOGD("jni seekTo: %d(msec)", msec);
		mp->seekTo(msec);
		PPLOGD("jni seekTo: %d(msec) end", msec);
	}
	else
	{
		mp->notify(MEDIA_SEEK_COMPLETE, 0, 0);
	}
}

JNIEXPORT jboolean android_media_omxmediaplayer_isPlaying(JNIEnv *env, jobject thiz)
{
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return false;
	}

	const jboolean is_playing = mp->isPlaying();

	PPLOGD("isPlaying: %d", is_playing);
	return is_playing;
}

JNIEXPORT jboolean android_media_omxmediaplayer_isLooping(JNIEnv *env, jobject thiz)
{
	PPLOGD("isLooping");
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return false;
	}

	return mp->isLooping();
}

/*
 * Class:     android_pplive_media_player_OMXPlayer
 * Method:    _setDataSource
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL android_media_omxmediaplayer_setDataSource
  (JNIEnv *env, jobject thiz, jstring path)
{
	PPLOGI("OMXPlayer_setDataSource()");
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return;
	}

	const char *pathStr = env->GetStringUTFChars(path, NULL);
	if (pathStr == NULL) {  // Out of memory
		jniThrowException(env, "java/lang/RuntimeException", "GetStringUTFChars: Out of memory");
		return;
	}
	mp->setDataSource(pathStr);

	// Make sure that local ref is released before a potential exception
	env->ReleaseStringUTFChars(path, pathStr);
}

JNIEXPORT void JNICALL android_media_omxmediaplayer_setVideoSurface
  (JNIEnv *env, jobject thiz, jobject surface)
{
	PPLOGI("OMXPlayer_setVideoSurface() %p", surface);
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return;
	}

	mp->setVideoSurface((void*)surface);
}

JNIEXPORT void JNICALL android_media_omxmediaplayer_prepareAsync
  (JNIEnv *env, jobject thiz)
{
	PPLOGI("OMXPlayer_prepareAsync");
	IPlayer* mp = getOMXMediaPlayer(env, thiz);
	if (mp == NULL ) {
		jniThrowException(env, "java/lang/IllegalStateException", NULL);
		return;
	}

	mp->prepareAsync();
}

#ifdef __cplusplus
}
#endif

static IPlayer* getOMXMediaPlayer(JNIEnv* env, jobject thiz)
{
	IPlayer* p = (IPlayer*)env->GetLongField(thiz, fields.context);
	return p;
}

static IPlayer* setOMXMediaPlayer(JNIEnv* env, jobject thiz, IPlayer* player)
{
	IPlayer* old = (IPlayer*)env->GetLongField(thiz, fields.context);
	env->SetLongField(thiz, fields.context, (int64_t)player);
	return old;
}

static JNINativeMethod gOMXplayerMethods[] = {
	{"_setDataSource",       "(Ljava/lang/String;)V",		(void *)android_media_omxmediaplayer_setDataSource},
	{"native_init",       "()Z",		(void *)android_media_omxmediaplayer_init},
	{"native_setup",       "(Ljava/lang/Object;)V",		(void *)android_media_omxmediaplayer_setup},
	{"_setVideoSurface",    "(Landroid/view/Surface;)V",					(void *)android_media_omxmediaplayer_setVideoSurface},
	{"prepareAsync",        "()V",					(void *)android_media_omxmediaplayer_prepareAsync},
	{"setOption",	"(Ljava/lang/String;)V",(void *)android_media_omxmediaplayer_setOption},
	
	// control
	{"start",              "()V",					(void *)android_media_omxmediaplayer_start},
	{"pause",              "()V",					(void *)android_media_omxmediaplayer_pause},
	{"stop",               "()V",					(void *)android_media_omxmediaplayer_stop},
	{"seekTo",              "(I)V",				(void *)android_media_omxmediaplayer_seekTo},

	// state
	{"isPlaying",           "()Z",					(void *)android_media_omxmediaplayer_isPlaying},
	{"isLooping",           "()Z",					(void *)android_media_omxmediaplayer_isLooping},
	
	// get info
	{"getVideoWidth",       "()I",					(void *)android_media_omxmediaplayer_getVideoWidth},
	{"getVideoHeight",      "()I",					(void *)android_media_omxmediaplayer_getVideoHeight},
	{"getCurrentPosition",  "()I",					(void *)android_media_omxmediaplayer_getCurrentPosition},
	{"getDuration",         "()I",					(void *)android_media_omxmediaplayer_getDuration},
	{"getBufferingTime", 	"()I",					(void *)android_media_omxmediaplayer_getBufferingTime},
};

int register_android_media_omxplayer(JNIEnv *env)
{
	const char* className = "android/pplive/media/player/OMXMediaPlayer";
	jclass clazz;

	PPLOGI("Registering %s natives", className);
	clazz = env->FindClass(className);
	if (clazz == NULL) {
		PPLOGE("Native registration unable to find class '%s'", className);
		return -1;
	}

	int result = 0;
	if (env->RegisterNatives(clazz, gOMXplayerMethods, NELEM(gOMXplayerMethods)) < 0) {
		PPLOGE("RegisterNatives failed for '%s'", className);
		result = -1;
	}

	env->DeleteLocalRef(clazz);
	return result;
}

#endif
