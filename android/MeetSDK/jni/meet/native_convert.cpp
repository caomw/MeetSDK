/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stdlib.h> // for NULL
#include "player/player.h"
#include "FFMediaPlayer.h" // for CONVERT_FUN
#define LOG_TAG "native_convert"
#include "pplog.h"

extern CONVERT_FUN convertFun;

/* Header for class _Included_android_pplive_media_MeetSDK */

#ifndef _Included_android_pplive_media_MeetSDK
#define _Included_android_pplive_media_MeetSDK
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     android_pplive_media_MeetSDK
 * Method:    Convert
 * Signature: ([B[B)I
 */
JNIEXPORT jint JNICALL Java_android_pplive_media_MeetSDK_Convert
  (JNIEnv *env, jclass clazz, jbyteArray in_flv, jint in_size, jbyteArray out_ts, jint process_timestamp, jint first_seg)
{
	PPLOGI("Convert()");

	int ret = -1;

	jbyte* flv_data = env->GetByteArrayElements(in_flv, NULL);
	jsize flv_data_size = in_size;//env->GetArrayLength(in_flv);

	jbyte* ts_data = env->GetByteArrayElements(out_ts, NULL);
	jsize ts_data_size = env->GetArrayLength(out_ts);

	PPLOGI("before call my_convert() flv %p %d, ts %p %d", flv_data, flv_data_size, ts_data, ts_data_size);
	bool bRet = convertFun((uint8_t *)flv_data, flv_data_size, (uint8_t *)ts_data, &ts_data_size, process_timestamp, first_seg);
	if (bRet)
		ret = ts_data_size;
	PPLOGI("after call my_convert() %d", ret);

	env->ReleaseByteArrayElements(in_flv, flv_data, 0);
	env->ReleaseByteArrayElements(out_ts, ts_data, 0);
	return ret;
}

#ifdef __cplusplus
}
#endif
#endif